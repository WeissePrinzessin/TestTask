basePath: /
definitions:
  main.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  main.TimeLog:
    properties:
      end_time:
        type: string
      id:
        type: integer
      start_time:
        type: string
      task_id:
        type: integer
      user_id:
        type: integer
    type: object
  main.User:
    properties:
      id:
        type: integer
      passportNumber:
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
  description: This is a sample server Petstore server.
  termsOfService: http://swagger.io/terms/
  title: People Info API
  version: "1.0"
paths:
  /users:
    get:
      description: Get users with optional passport number filter
      parameters:
      - description: Passport Number
        in: query
        name: passportNumber
        type: string
      - description: Number of users to skip
        in: query
        name: skip
        type: integer
      - description: Number of users to return
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.User'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Get users
    post:
      consumes:
      - application/json
      description: Create a new user
      parameters:
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Create user
  /users/{id}:
    delete:
      description: Delete a user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Delete user
    put:
      consumes:
      - application/json
      description: Update an existing user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/main.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.User'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/main.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Update user
  /users/{id}/tasks/{task_id}/start:
    post:
      description: Start a task for a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Task ID
        in: path
        name: task_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.TimeLog'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Start task
  /users/{id}/tasks/{task_id}/stop:
    post:
      description: Stop a task for a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Task ID
        in: path
        name: task_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/main.TimeLog'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Stop task
  /users/{id}/worklogs:
    get:
      description: Get worklogs for a user
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: integer
      - description: Start date in RFC3339 format
        in: query
        name: start
        type: string
      - description: End date in RFC3339 format
        in: query
        name: end
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/main.TimeLog'
            type: array
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/main.ErrorResponse'
      summary: Get user worklogs
schemes:
- http
swagger: "2.0"
